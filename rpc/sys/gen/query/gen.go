// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	SysAPI         *sysAPI
	SysCasbinRule  *sysCasbinRule
	SysDept        *sysDept
	SysMenu        *sysMenu
	SysMenuAPIRule *sysMenuAPIRule
	SysRole        *sysRole
	SysRoleMenu    *sysRoleMenu
	SysUser        *sysUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	SysAPI = &Q.SysAPI
	SysCasbinRule = &Q.SysCasbinRule
	SysDept = &Q.SysDept
	SysMenu = &Q.SysMenu
	SysMenuAPIRule = &Q.SysMenuAPIRule
	SysRole = &Q.SysRole
	SysRoleMenu = &Q.SysRoleMenu
	SysUser = &Q.SysUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		SysAPI:         newSysAPI(db, opts...),
		SysCasbinRule:  newSysCasbinRule(db, opts...),
		SysDept:        newSysDept(db, opts...),
		SysMenu:        newSysMenu(db, opts...),
		SysMenuAPIRule: newSysMenuAPIRule(db, opts...),
		SysRole:        newSysRole(db, opts...),
		SysRoleMenu:    newSysRoleMenu(db, opts...),
		SysUser:        newSysUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	SysAPI         sysAPI
	SysCasbinRule  sysCasbinRule
	SysDept        sysDept
	SysMenu        sysMenu
	SysMenuAPIRule sysMenuAPIRule
	SysRole        sysRole
	SysRoleMenu    sysRoleMenu
	SysUser        sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		SysAPI:         q.SysAPI.clone(db),
		SysCasbinRule:  q.SysCasbinRule.clone(db),
		SysDept:        q.SysDept.clone(db),
		SysMenu:        q.SysMenu.clone(db),
		SysMenuAPIRule: q.SysMenuAPIRule.clone(db),
		SysRole:        q.SysRole.clone(db),
		SysRoleMenu:    q.SysRoleMenu.clone(db),
		SysUser:        q.SysUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		SysAPI:         q.SysAPI.replaceDB(db),
		SysCasbinRule:  q.SysCasbinRule.replaceDB(db),
		SysDept:        q.SysDept.replaceDB(db),
		SysMenu:        q.SysMenu.replaceDB(db),
		SysMenuAPIRule: q.SysMenuAPIRule.replaceDB(db),
		SysRole:        q.SysRole.replaceDB(db),
		SysRoleMenu:    q.SysRoleMenu.replaceDB(db),
		SysUser:        q.SysUser.replaceDB(db),
	}
}

type queryCtx struct {
	SysAPI         ISysAPIDo
	SysCasbinRule  ISysCasbinRuleDo
	SysDept        ISysDeptDo
	SysMenu        ISysMenuDo
	SysMenuAPIRule ISysMenuAPIRuleDo
	SysRole        ISysRoleDo
	SysRoleMenu    ISysRoleMenuDo
	SysUser        ISysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		SysAPI:         q.SysAPI.WithContext(ctx),
		SysCasbinRule:  q.SysCasbinRule.WithContext(ctx),
		SysDept:        q.SysDept.WithContext(ctx),
		SysMenu:        q.SysMenu.WithContext(ctx),
		SysMenuAPIRule: q.SysMenuAPIRule.WithContext(ctx),
		SysRole:        q.SysRole.WithContext(ctx),
		SysRoleMenu:    q.SysRoleMenu.WithContext(ctx),
		SysUser:        q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
