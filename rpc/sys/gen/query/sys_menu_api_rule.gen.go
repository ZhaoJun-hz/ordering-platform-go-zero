// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ordering-platform/rpc/sys/gen/model"
)

func newSysMenuAPIRule(db *gorm.DB, opts ...gen.DOOption) sysMenuAPIRule {
	_sysMenuAPIRule := sysMenuAPIRule{}

	_sysMenuAPIRule.sysMenuAPIRuleDo.UseDB(db, opts...)
	_sysMenuAPIRule.sysMenuAPIRuleDo.UseModel(&model.SysMenuAPIRule{})

	tableName := _sysMenuAPIRule.sysMenuAPIRuleDo.TableName()
	_sysMenuAPIRule.ALL = field.NewAsterisk(tableName)
	_sysMenuAPIRule.ID = field.NewInt64(tableName, "id")
	_sysMenuAPIRule.SysMenuMenuID = field.NewInt64(tableName, "sys_menu_menu_id")
	_sysMenuAPIRule.SysAPIID = field.NewInt64(tableName, "sys_api_id")

	_sysMenuAPIRule.fillFieldMap()

	return _sysMenuAPIRule
}

type sysMenuAPIRule struct {
	sysMenuAPIRuleDo sysMenuAPIRuleDo

	ALL           field.Asterisk
	ID            field.Int64
	SysMenuMenuID field.Int64
	SysAPIID      field.Int64 // 主键编码

	fieldMap map[string]field.Expr
}

func (s sysMenuAPIRule) Table(newTableName string) *sysMenuAPIRule {
	s.sysMenuAPIRuleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysMenuAPIRule) As(alias string) *sysMenuAPIRule {
	s.sysMenuAPIRuleDo.DO = *(s.sysMenuAPIRuleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysMenuAPIRule) updateTableName(table string) *sysMenuAPIRule {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SysMenuMenuID = field.NewInt64(table, "sys_menu_menu_id")
	s.SysAPIID = field.NewInt64(table, "sys_api_id")

	s.fillFieldMap()

	return s
}

func (s *sysMenuAPIRule) WithContext(ctx context.Context) ISysMenuAPIRuleDo {
	return s.sysMenuAPIRuleDo.WithContext(ctx)
}

func (s sysMenuAPIRule) TableName() string { return s.sysMenuAPIRuleDo.TableName() }

func (s sysMenuAPIRule) Alias() string { return s.sysMenuAPIRuleDo.Alias() }

func (s sysMenuAPIRule) Columns(cols ...field.Expr) gen.Columns {
	return s.sysMenuAPIRuleDo.Columns(cols...)
}

func (s *sysMenuAPIRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysMenuAPIRule) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sys_menu_menu_id"] = s.SysMenuMenuID
	s.fieldMap["sys_api_id"] = s.SysAPIID
}

func (s sysMenuAPIRule) clone(db *gorm.DB) sysMenuAPIRule {
	s.sysMenuAPIRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysMenuAPIRule) replaceDB(db *gorm.DB) sysMenuAPIRule {
	s.sysMenuAPIRuleDo.ReplaceDB(db)
	return s
}

type sysMenuAPIRuleDo struct{ gen.DO }

type ISysMenuAPIRuleDo interface {
	gen.SubQuery
	Debug() ISysMenuAPIRuleDo
	WithContext(ctx context.Context) ISysMenuAPIRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysMenuAPIRuleDo
	WriteDB() ISysMenuAPIRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysMenuAPIRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysMenuAPIRuleDo
	Not(conds ...gen.Condition) ISysMenuAPIRuleDo
	Or(conds ...gen.Condition) ISysMenuAPIRuleDo
	Select(conds ...field.Expr) ISysMenuAPIRuleDo
	Where(conds ...gen.Condition) ISysMenuAPIRuleDo
	Order(conds ...field.Expr) ISysMenuAPIRuleDo
	Distinct(cols ...field.Expr) ISysMenuAPIRuleDo
	Omit(cols ...field.Expr) ISysMenuAPIRuleDo
	Join(table schema.Tabler, on ...field.Expr) ISysMenuAPIRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuAPIRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuAPIRuleDo
	Group(cols ...field.Expr) ISysMenuAPIRuleDo
	Having(conds ...gen.Condition) ISysMenuAPIRuleDo
	Limit(limit int) ISysMenuAPIRuleDo
	Offset(offset int) ISysMenuAPIRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuAPIRuleDo
	Unscoped() ISysMenuAPIRuleDo
	Create(values ...*model.SysMenuAPIRule) error
	CreateInBatches(values []*model.SysMenuAPIRule, batchSize int) error
	Save(values ...*model.SysMenuAPIRule) error
	First() (*model.SysMenuAPIRule, error)
	Take() (*model.SysMenuAPIRule, error)
	Last() (*model.SysMenuAPIRule, error)
	Find() ([]*model.SysMenuAPIRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuAPIRule, err error)
	FindInBatches(result *[]*model.SysMenuAPIRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysMenuAPIRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysMenuAPIRuleDo
	Assign(attrs ...field.AssignExpr) ISysMenuAPIRuleDo
	Joins(fields ...field.RelationField) ISysMenuAPIRuleDo
	Preload(fields ...field.RelationField) ISysMenuAPIRuleDo
	FirstOrInit() (*model.SysMenuAPIRule, error)
	FirstOrCreate() (*model.SysMenuAPIRule, error)
	FindByPage(offset int, limit int) (result []*model.SysMenuAPIRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysMenuAPIRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysMenuAPIRuleDo) Debug() ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Debug())
}

func (s sysMenuAPIRuleDo) WithContext(ctx context.Context) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysMenuAPIRuleDo) ReadDB() ISysMenuAPIRuleDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysMenuAPIRuleDo) WriteDB() ISysMenuAPIRuleDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysMenuAPIRuleDo) Session(config *gorm.Session) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysMenuAPIRuleDo) Clauses(conds ...clause.Expression) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysMenuAPIRuleDo) Returning(value interface{}, columns ...string) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysMenuAPIRuleDo) Not(conds ...gen.Condition) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysMenuAPIRuleDo) Or(conds ...gen.Condition) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysMenuAPIRuleDo) Select(conds ...field.Expr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysMenuAPIRuleDo) Where(conds ...gen.Condition) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysMenuAPIRuleDo) Order(conds ...field.Expr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysMenuAPIRuleDo) Distinct(cols ...field.Expr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysMenuAPIRuleDo) Omit(cols ...field.Expr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysMenuAPIRuleDo) Join(table schema.Tabler, on ...field.Expr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysMenuAPIRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysMenuAPIRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysMenuAPIRuleDo) Group(cols ...field.Expr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysMenuAPIRuleDo) Having(conds ...gen.Condition) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysMenuAPIRuleDo) Limit(limit int) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysMenuAPIRuleDo) Offset(offset int) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysMenuAPIRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysMenuAPIRuleDo) Unscoped() ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysMenuAPIRuleDo) Create(values ...*model.SysMenuAPIRule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysMenuAPIRuleDo) CreateInBatches(values []*model.SysMenuAPIRule, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysMenuAPIRuleDo) Save(values ...*model.SysMenuAPIRule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysMenuAPIRuleDo) First() (*model.SysMenuAPIRule, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPIRule), nil
	}
}

func (s sysMenuAPIRuleDo) Take() (*model.SysMenuAPIRule, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPIRule), nil
	}
}

func (s sysMenuAPIRuleDo) Last() (*model.SysMenuAPIRule, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPIRule), nil
	}
}

func (s sysMenuAPIRuleDo) Find() ([]*model.SysMenuAPIRule, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysMenuAPIRule), err
}

func (s sysMenuAPIRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuAPIRule, err error) {
	buf := make([]*model.SysMenuAPIRule, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysMenuAPIRuleDo) FindInBatches(result *[]*model.SysMenuAPIRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysMenuAPIRuleDo) Attrs(attrs ...field.AssignExpr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysMenuAPIRuleDo) Assign(attrs ...field.AssignExpr) ISysMenuAPIRuleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysMenuAPIRuleDo) Joins(fields ...field.RelationField) ISysMenuAPIRuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysMenuAPIRuleDo) Preload(fields ...field.RelationField) ISysMenuAPIRuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysMenuAPIRuleDo) FirstOrInit() (*model.SysMenuAPIRule, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPIRule), nil
	}
}

func (s sysMenuAPIRuleDo) FirstOrCreate() (*model.SysMenuAPIRule, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPIRule), nil
	}
}

func (s sysMenuAPIRuleDo) FindByPage(offset int, limit int) (result []*model.SysMenuAPIRule, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysMenuAPIRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysMenuAPIRuleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysMenuAPIRuleDo) Delete(models ...*model.SysMenuAPIRule) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysMenuAPIRuleDo) withDO(do gen.Dao) *sysMenuAPIRuleDo {
	s.DO = *do.(*gen.DO)
	return s
}
