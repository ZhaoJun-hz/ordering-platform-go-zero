// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ordering-platform/rpc/sys/gen/model"
)

func newSysCasbinRule(db *gorm.DB, opts ...gen.DOOption) sysCasbinRule {
	_sysCasbinRule := sysCasbinRule{}

	_sysCasbinRule.sysCasbinRuleDo.UseDB(db, opts...)
	_sysCasbinRule.sysCasbinRuleDo.UseModel(&model.SysCasbinRule{})

	tableName := _sysCasbinRule.sysCasbinRuleDo.TableName()
	_sysCasbinRule.ALL = field.NewAsterisk(tableName)
	_sysCasbinRule.ID = field.NewInt64(tableName, "id")
	_sysCasbinRule.Ptype = field.NewString(tableName, "ptype")
	_sysCasbinRule.V0 = field.NewString(tableName, "v0")
	_sysCasbinRule.V1 = field.NewString(tableName, "v1")
	_sysCasbinRule.V2 = field.NewString(tableName, "v2")
	_sysCasbinRule.V3 = field.NewString(tableName, "v3")
	_sysCasbinRule.V4 = field.NewString(tableName, "v4")
	_sysCasbinRule.V5 = field.NewString(tableName, "v5")
	_sysCasbinRule.V6 = field.NewString(tableName, "v6")
	_sysCasbinRule.V7 = field.NewString(tableName, "v7")

	_sysCasbinRule.fillFieldMap()

	return _sysCasbinRule
}

type sysCasbinRule struct {
	sysCasbinRuleDo sysCasbinRuleDo

	ALL   field.Asterisk
	ID    field.Int64
	Ptype field.String
	V0    field.String
	V1    field.String
	V2    field.String
	V3    field.String
	V4    field.String
	V5    field.String
	V6    field.String
	V7    field.String

	fieldMap map[string]field.Expr
}

func (s sysCasbinRule) Table(newTableName string) *sysCasbinRule {
	s.sysCasbinRuleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysCasbinRule) As(alias string) *sysCasbinRule {
	s.sysCasbinRuleDo.DO = *(s.sysCasbinRuleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysCasbinRule) updateTableName(table string) *sysCasbinRule {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Ptype = field.NewString(table, "ptype")
	s.V0 = field.NewString(table, "v0")
	s.V1 = field.NewString(table, "v1")
	s.V2 = field.NewString(table, "v2")
	s.V3 = field.NewString(table, "v3")
	s.V4 = field.NewString(table, "v4")
	s.V5 = field.NewString(table, "v5")
	s.V6 = field.NewString(table, "v6")
	s.V7 = field.NewString(table, "v7")

	s.fillFieldMap()

	return s
}

func (s *sysCasbinRule) WithContext(ctx context.Context) ISysCasbinRuleDo {
	return s.sysCasbinRuleDo.WithContext(ctx)
}

func (s sysCasbinRule) TableName() string { return s.sysCasbinRuleDo.TableName() }

func (s sysCasbinRule) Alias() string { return s.sysCasbinRuleDo.Alias() }

func (s sysCasbinRule) Columns(cols ...field.Expr) gen.Columns {
	return s.sysCasbinRuleDo.Columns(cols...)
}

func (s *sysCasbinRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysCasbinRule) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["ptype"] = s.Ptype
	s.fieldMap["v0"] = s.V0
	s.fieldMap["v1"] = s.V1
	s.fieldMap["v2"] = s.V2
	s.fieldMap["v3"] = s.V3
	s.fieldMap["v4"] = s.V4
	s.fieldMap["v5"] = s.V5
	s.fieldMap["v6"] = s.V6
	s.fieldMap["v7"] = s.V7
}

func (s sysCasbinRule) clone(db *gorm.DB) sysCasbinRule {
	s.sysCasbinRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysCasbinRule) replaceDB(db *gorm.DB) sysCasbinRule {
	s.sysCasbinRuleDo.ReplaceDB(db)
	return s
}

type sysCasbinRuleDo struct{ gen.DO }

type ISysCasbinRuleDo interface {
	gen.SubQuery
	Debug() ISysCasbinRuleDo
	WithContext(ctx context.Context) ISysCasbinRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysCasbinRuleDo
	WriteDB() ISysCasbinRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysCasbinRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysCasbinRuleDo
	Not(conds ...gen.Condition) ISysCasbinRuleDo
	Or(conds ...gen.Condition) ISysCasbinRuleDo
	Select(conds ...field.Expr) ISysCasbinRuleDo
	Where(conds ...gen.Condition) ISysCasbinRuleDo
	Order(conds ...field.Expr) ISysCasbinRuleDo
	Distinct(cols ...field.Expr) ISysCasbinRuleDo
	Omit(cols ...field.Expr) ISysCasbinRuleDo
	Join(table schema.Tabler, on ...field.Expr) ISysCasbinRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysCasbinRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysCasbinRuleDo
	Group(cols ...field.Expr) ISysCasbinRuleDo
	Having(conds ...gen.Condition) ISysCasbinRuleDo
	Limit(limit int) ISysCasbinRuleDo
	Offset(offset int) ISysCasbinRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCasbinRuleDo
	Unscoped() ISysCasbinRuleDo
	Create(values ...*model.SysCasbinRule) error
	CreateInBatches(values []*model.SysCasbinRule, batchSize int) error
	Save(values ...*model.SysCasbinRule) error
	First() (*model.SysCasbinRule, error)
	Take() (*model.SysCasbinRule, error)
	Last() (*model.SysCasbinRule, error)
	Find() ([]*model.SysCasbinRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCasbinRule, err error)
	FindInBatches(result *[]*model.SysCasbinRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysCasbinRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysCasbinRuleDo
	Assign(attrs ...field.AssignExpr) ISysCasbinRuleDo
	Joins(fields ...field.RelationField) ISysCasbinRuleDo
	Preload(fields ...field.RelationField) ISysCasbinRuleDo
	FirstOrInit() (*model.SysCasbinRule, error)
	FirstOrCreate() (*model.SysCasbinRule, error)
	FindByPage(offset int, limit int) (result []*model.SysCasbinRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysCasbinRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysCasbinRuleDo) Debug() ISysCasbinRuleDo {
	return s.withDO(s.DO.Debug())
}

func (s sysCasbinRuleDo) WithContext(ctx context.Context) ISysCasbinRuleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysCasbinRuleDo) ReadDB() ISysCasbinRuleDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysCasbinRuleDo) WriteDB() ISysCasbinRuleDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysCasbinRuleDo) Session(config *gorm.Session) ISysCasbinRuleDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysCasbinRuleDo) Clauses(conds ...clause.Expression) ISysCasbinRuleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysCasbinRuleDo) Returning(value interface{}, columns ...string) ISysCasbinRuleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysCasbinRuleDo) Not(conds ...gen.Condition) ISysCasbinRuleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysCasbinRuleDo) Or(conds ...gen.Condition) ISysCasbinRuleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysCasbinRuleDo) Select(conds ...field.Expr) ISysCasbinRuleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysCasbinRuleDo) Where(conds ...gen.Condition) ISysCasbinRuleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysCasbinRuleDo) Order(conds ...field.Expr) ISysCasbinRuleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysCasbinRuleDo) Distinct(cols ...field.Expr) ISysCasbinRuleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysCasbinRuleDo) Omit(cols ...field.Expr) ISysCasbinRuleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysCasbinRuleDo) Join(table schema.Tabler, on ...field.Expr) ISysCasbinRuleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysCasbinRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysCasbinRuleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysCasbinRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysCasbinRuleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysCasbinRuleDo) Group(cols ...field.Expr) ISysCasbinRuleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysCasbinRuleDo) Having(conds ...gen.Condition) ISysCasbinRuleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysCasbinRuleDo) Limit(limit int) ISysCasbinRuleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysCasbinRuleDo) Offset(offset int) ISysCasbinRuleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysCasbinRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCasbinRuleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysCasbinRuleDo) Unscoped() ISysCasbinRuleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysCasbinRuleDo) Create(values ...*model.SysCasbinRule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysCasbinRuleDo) CreateInBatches(values []*model.SysCasbinRule, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysCasbinRuleDo) Save(values ...*model.SysCasbinRule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysCasbinRuleDo) First() (*model.SysCasbinRule, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCasbinRule), nil
	}
}

func (s sysCasbinRuleDo) Take() (*model.SysCasbinRule, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCasbinRule), nil
	}
}

func (s sysCasbinRuleDo) Last() (*model.SysCasbinRule, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCasbinRule), nil
	}
}

func (s sysCasbinRuleDo) Find() ([]*model.SysCasbinRule, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysCasbinRule), err
}

func (s sysCasbinRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCasbinRule, err error) {
	buf := make([]*model.SysCasbinRule, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysCasbinRuleDo) FindInBatches(result *[]*model.SysCasbinRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysCasbinRuleDo) Attrs(attrs ...field.AssignExpr) ISysCasbinRuleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysCasbinRuleDo) Assign(attrs ...field.AssignExpr) ISysCasbinRuleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysCasbinRuleDo) Joins(fields ...field.RelationField) ISysCasbinRuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysCasbinRuleDo) Preload(fields ...field.RelationField) ISysCasbinRuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysCasbinRuleDo) FirstOrInit() (*model.SysCasbinRule, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCasbinRule), nil
	}
}

func (s sysCasbinRuleDo) FirstOrCreate() (*model.SysCasbinRule, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCasbinRule), nil
	}
}

func (s sysCasbinRuleDo) FindByPage(offset int, limit int) (result []*model.SysCasbinRule, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysCasbinRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysCasbinRuleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysCasbinRuleDo) Delete(models ...*model.SysCasbinRule) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysCasbinRuleDo) withDO(do gen.Dao) *sysCasbinRuleDo {
	s.DO = *do.(*gen.DO)
	return s
}
