// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ordering-platform/rpc/sys/gen/model"
)

func newSysMenuAPI(db *gorm.DB, opts ...gen.DOOption) sysMenuAPI {
	_sysMenuAPI := sysMenuAPI{}

	_sysMenuAPI.sysMenuAPIDo.UseDB(db, opts...)
	_sysMenuAPI.sysMenuAPIDo.UseModel(&model.SysMenuAPI{})

	tableName := _sysMenuAPI.sysMenuAPIDo.TableName()
	_sysMenuAPI.ALL = field.NewAsterisk(tableName)
	_sysMenuAPI.ID = field.NewInt64(tableName, "id")
	_sysMenuAPI.MenuID = field.NewInt64(tableName, "menu_id")
	_sysMenuAPI.APIID = field.NewInt64(tableName, "api_id")

	_sysMenuAPI.fillFieldMap()

	return _sysMenuAPI
}

type sysMenuAPI struct {
	sysMenuAPIDo sysMenuAPIDo

	ALL    field.Asterisk
	ID     field.Int64
	MenuID field.Int64
	APIID  field.Int64 // 主键编码

	fieldMap map[string]field.Expr
}

func (s sysMenuAPI) Table(newTableName string) *sysMenuAPI {
	s.sysMenuAPIDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysMenuAPI) As(alias string) *sysMenuAPI {
	s.sysMenuAPIDo.DO = *(s.sysMenuAPIDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysMenuAPI) updateTableName(table string) *sysMenuAPI {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.MenuID = field.NewInt64(table, "menu_id")
	s.APIID = field.NewInt64(table, "api_id")

	s.fillFieldMap()

	return s
}

func (s *sysMenuAPI) WithContext(ctx context.Context) ISysMenuAPIDo {
	return s.sysMenuAPIDo.WithContext(ctx)
}

func (s sysMenuAPI) TableName() string { return s.sysMenuAPIDo.TableName() }

func (s sysMenuAPI) Alias() string { return s.sysMenuAPIDo.Alias() }

func (s sysMenuAPI) Columns(cols ...field.Expr) gen.Columns { return s.sysMenuAPIDo.Columns(cols...) }

func (s *sysMenuAPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysMenuAPI) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["menu_id"] = s.MenuID
	s.fieldMap["api_id"] = s.APIID
}

func (s sysMenuAPI) clone(db *gorm.DB) sysMenuAPI {
	s.sysMenuAPIDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysMenuAPI) replaceDB(db *gorm.DB) sysMenuAPI {
	s.sysMenuAPIDo.ReplaceDB(db)
	return s
}

type sysMenuAPIDo struct{ gen.DO }

type ISysMenuAPIDo interface {
	gen.SubQuery
	Debug() ISysMenuAPIDo
	WithContext(ctx context.Context) ISysMenuAPIDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysMenuAPIDo
	WriteDB() ISysMenuAPIDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysMenuAPIDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysMenuAPIDo
	Not(conds ...gen.Condition) ISysMenuAPIDo
	Or(conds ...gen.Condition) ISysMenuAPIDo
	Select(conds ...field.Expr) ISysMenuAPIDo
	Where(conds ...gen.Condition) ISysMenuAPIDo
	Order(conds ...field.Expr) ISysMenuAPIDo
	Distinct(cols ...field.Expr) ISysMenuAPIDo
	Omit(cols ...field.Expr) ISysMenuAPIDo
	Join(table schema.Tabler, on ...field.Expr) ISysMenuAPIDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuAPIDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuAPIDo
	Group(cols ...field.Expr) ISysMenuAPIDo
	Having(conds ...gen.Condition) ISysMenuAPIDo
	Limit(limit int) ISysMenuAPIDo
	Offset(offset int) ISysMenuAPIDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuAPIDo
	Unscoped() ISysMenuAPIDo
	Create(values ...*model.SysMenuAPI) error
	CreateInBatches(values []*model.SysMenuAPI, batchSize int) error
	Save(values ...*model.SysMenuAPI) error
	First() (*model.SysMenuAPI, error)
	Take() (*model.SysMenuAPI, error)
	Last() (*model.SysMenuAPI, error)
	Find() ([]*model.SysMenuAPI, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuAPI, err error)
	FindInBatches(result *[]*model.SysMenuAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysMenuAPI) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysMenuAPIDo
	Assign(attrs ...field.AssignExpr) ISysMenuAPIDo
	Joins(fields ...field.RelationField) ISysMenuAPIDo
	Preload(fields ...field.RelationField) ISysMenuAPIDo
	FirstOrInit() (*model.SysMenuAPI, error)
	FirstOrCreate() (*model.SysMenuAPI, error)
	FindByPage(offset int, limit int) (result []*model.SysMenuAPI, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysMenuAPIDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysMenuAPIDo) Debug() ISysMenuAPIDo {
	return s.withDO(s.DO.Debug())
}

func (s sysMenuAPIDo) WithContext(ctx context.Context) ISysMenuAPIDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysMenuAPIDo) ReadDB() ISysMenuAPIDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysMenuAPIDo) WriteDB() ISysMenuAPIDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysMenuAPIDo) Session(config *gorm.Session) ISysMenuAPIDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysMenuAPIDo) Clauses(conds ...clause.Expression) ISysMenuAPIDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysMenuAPIDo) Returning(value interface{}, columns ...string) ISysMenuAPIDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysMenuAPIDo) Not(conds ...gen.Condition) ISysMenuAPIDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysMenuAPIDo) Or(conds ...gen.Condition) ISysMenuAPIDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysMenuAPIDo) Select(conds ...field.Expr) ISysMenuAPIDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysMenuAPIDo) Where(conds ...gen.Condition) ISysMenuAPIDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysMenuAPIDo) Order(conds ...field.Expr) ISysMenuAPIDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysMenuAPIDo) Distinct(cols ...field.Expr) ISysMenuAPIDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysMenuAPIDo) Omit(cols ...field.Expr) ISysMenuAPIDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysMenuAPIDo) Join(table schema.Tabler, on ...field.Expr) ISysMenuAPIDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysMenuAPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuAPIDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysMenuAPIDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuAPIDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysMenuAPIDo) Group(cols ...field.Expr) ISysMenuAPIDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysMenuAPIDo) Having(conds ...gen.Condition) ISysMenuAPIDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysMenuAPIDo) Limit(limit int) ISysMenuAPIDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysMenuAPIDo) Offset(offset int) ISysMenuAPIDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysMenuAPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuAPIDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysMenuAPIDo) Unscoped() ISysMenuAPIDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysMenuAPIDo) Create(values ...*model.SysMenuAPI) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysMenuAPIDo) CreateInBatches(values []*model.SysMenuAPI, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysMenuAPIDo) Save(values ...*model.SysMenuAPI) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysMenuAPIDo) First() (*model.SysMenuAPI, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPI), nil
	}
}

func (s sysMenuAPIDo) Take() (*model.SysMenuAPI, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPI), nil
	}
}

func (s sysMenuAPIDo) Last() (*model.SysMenuAPI, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPI), nil
	}
}

func (s sysMenuAPIDo) Find() ([]*model.SysMenuAPI, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysMenuAPI), err
}

func (s sysMenuAPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuAPI, err error) {
	buf := make([]*model.SysMenuAPI, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysMenuAPIDo) FindInBatches(result *[]*model.SysMenuAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysMenuAPIDo) Attrs(attrs ...field.AssignExpr) ISysMenuAPIDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysMenuAPIDo) Assign(attrs ...field.AssignExpr) ISysMenuAPIDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysMenuAPIDo) Joins(fields ...field.RelationField) ISysMenuAPIDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysMenuAPIDo) Preload(fields ...field.RelationField) ISysMenuAPIDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysMenuAPIDo) FirstOrInit() (*model.SysMenuAPI, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPI), nil
	}
}

func (s sysMenuAPIDo) FirstOrCreate() (*model.SysMenuAPI, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuAPI), nil
	}
}

func (s sysMenuAPIDo) FindByPage(offset int, limit int) (result []*model.SysMenuAPI, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysMenuAPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysMenuAPIDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysMenuAPIDo) Delete(models ...*model.SysMenuAPI) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysMenuAPIDo) withDO(do gen.Dao) *sysMenuAPIDo {
	s.DO = *do.(*gen.DO)
	return s
}
